Objective-PHP

＊クラス
クラスとはオブジェクトの設計図

＊インスタンス
設計図から作り出す実体

☆☆☆
オブジェクトの設計図がクラス
オブジェクトの実体はインスタンス
インスタンスはクラスを元に作られる
　　☆☆☆
　　
＊インスタンスの生成
実はインスタンスは
$foo = new Foo();  ←こいつのこと

＊メンバ
フィールドやメソッドなどのクラスの構成要因を総称してメンバという
class Foo {
	private $price;　←こいつとか
	public function bar() {　←こいつをまとめてメンバ
		return $price;
	}
}

＊インスタンスの性質1
クラスは設計図でインスタンスはその実体であるから、
インスタンスは複数作れる（別々のものとして）
ex)	プリウスは設計図を元に作られる（クラス）
	プリウスは量産できる（インスタンス）
インスタンスの性質そのものはすべて共通
インスタンスが抱えるデータはそれぞれ異なる

＊インスタンスの性質2
インスタンスは常に参照型である
（参照型：関数の中の変数が変化したら呼出側にも影響する）
クラスのインスタンスは明示せずとも関数の中でそのインスタンスに変化があると呼出側にも影響する
インスタンスはどうやっても参照渡しになる。値渡しはできないのでcloneして同等のことができる。
インスタンス同士を厳密等価演算子で比較すると同一のインスタンスのみtrueを返却する

＊コンストラクタ
マジックメソッドのひとつ。インスタンスがnewされた瞬間に実行される
class Foo {
	public function __construct() {
	}
}
コンストラクタのアクセス修飾子は基本的にpublicにする。

＊カプセル化
カプセル化とはすなわち、「隠すべきものは隠す」
privateなメンバは存在すらわかんない。
保守性の恩恵は
・保守性の向上
・外部から見たクラスの単純化
・クラスの持つ性質の正当性を保証
カプセル化の基本、フィールドは直接参照させない。
☆クラス設計の大事なことは「外部との結びつきを弱める」こと
PHPは型の制約がないのでpublicフィールドの危険性が高い
！メソッドの公開は必要最低限でよい。

＊継承
class クラス名 extends 親クラス名 {
}
既存のクラスを親に設定する。privateのメンバは継承されない
protected装飾子は継承先のクラスでのみ参照可能であることを示す
継承を想定した非公開メンバはprotectedにする

＊継承による保守性の確保
鉄則「同じ処理は2度書いてはならない」